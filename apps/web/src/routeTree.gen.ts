/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardSettingsImport } from './routes/dashboard.settings'
import { Route as DashboardServersImport } from './routes/dashboard.servers'
import { Route as DashboardActivityImport } from './routes/dashboard.activity'
import { Route as DashboardSettingsGeneralImport } from './routes/dashboard.settings.general'
import { Route as DashboardSettingsBillingImport } from './routes/dashboard.settings.billing'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersRoute = DashboardServersImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardActivityRoute = DashboardActivityImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsGeneralRoute = DashboardSettingsGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => DashboardSettingsRoute,
} as any)

const DashboardSettingsBillingRoute = DashboardSettingsBillingImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => DashboardSettingsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/activity': {
      id: '/dashboard/activity'
      path: '/activity'
      fullPath: '/dashboard/activity'
      preLoaderRoute: typeof DashboardActivityImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/servers': {
      id: '/dashboard/servers'
      path: '/servers'
      fullPath: '/dashboard/servers'
      preLoaderRoute: typeof DashboardServersImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings/billing': {
      id: '/dashboard/settings/billing'
      path: '/billing'
      fullPath: '/dashboard/settings/billing'
      preLoaderRoute: typeof DashboardSettingsBillingImport
      parentRoute: typeof DashboardSettingsImport
    }
    '/dashboard/settings/general': {
      id: '/dashboard/settings/general'
      path: '/general'
      fullPath: '/dashboard/settings/general'
      preLoaderRoute: typeof DashboardSettingsGeneralImport
      parentRoute: typeof DashboardSettingsImport
    }
  }
}

// Create and export the route tree

interface DashboardSettingsRouteChildren {
  DashboardSettingsBillingRoute: typeof DashboardSettingsBillingRoute
  DashboardSettingsGeneralRoute: typeof DashboardSettingsGeneralRoute
}

const DashboardSettingsRouteChildren: DashboardSettingsRouteChildren = {
  DashboardSettingsBillingRoute: DashboardSettingsBillingRoute,
  DashboardSettingsGeneralRoute: DashboardSettingsGeneralRoute,
}

const DashboardSettingsRouteWithChildren =
  DashboardSettingsRoute._addFileChildren(DashboardSettingsRouteChildren)

interface DashboardRouteChildren {
  DashboardActivityRoute: typeof DashboardActivityRoute
  DashboardServersRoute: typeof DashboardServersRoute
  DashboardSettingsRoute: typeof DashboardSettingsRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardActivityRoute: DashboardActivityRoute,
  DashboardServersRoute: DashboardServersRoute,
  DashboardSettingsRoute: DashboardSettingsRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/dashboard/activity': typeof DashboardActivityRoute
  '/dashboard/servers': typeof DashboardServersRoute
  '/dashboard/settings': typeof DashboardSettingsRouteWithChildren
  '/dashboard/settings/billing': typeof DashboardSettingsBillingRoute
  '/dashboard/settings/general': typeof DashboardSettingsGeneralRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/dashboard/activity': typeof DashboardActivityRoute
  '/dashboard/servers': typeof DashboardServersRoute
  '/dashboard/settings': typeof DashboardSettingsRouteWithChildren
  '/dashboard/settings/billing': typeof DashboardSettingsBillingRoute
  '/dashboard/settings/general': typeof DashboardSettingsGeneralRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/dashboard/activity': typeof DashboardActivityRoute
  '/dashboard/servers': typeof DashboardServersRoute
  '/dashboard/settings': typeof DashboardSettingsRouteWithChildren
  '/dashboard/settings/billing': typeof DashboardSettingsBillingRoute
  '/dashboard/settings/general': typeof DashboardSettingsGeneralRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/dashboard/activity'
    | '/dashboard/servers'
    | '/dashboard/settings'
    | '/dashboard/settings/billing'
    | '/dashboard/settings/general'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/dashboard/activity'
    | '/dashboard/servers'
    | '/dashboard/settings'
    | '/dashboard/settings/billing'
    | '/dashboard/settings/general'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/dashboard/activity'
    | '/dashboard/servers'
    | '/dashboard/settings'
    | '/dashboard/settings/billing'
    | '/dashboard/settings/general'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  SignInRoute: typeof SignInRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  SignInRoute: SignInRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/sign-in"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/activity",
        "/dashboard/servers",
        "/dashboard/settings"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/dashboard/activity": {
      "filePath": "dashboard.activity.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/servers": {
      "filePath": "dashboard.servers.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard.settings.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/settings/billing",
        "/dashboard/settings/general"
      ]
    },
    "/dashboard/settings/billing": {
      "filePath": "dashboard.settings.billing.tsx",
      "parent": "/dashboard/settings"
    },
    "/dashboard/settings/general": {
      "filePath": "dashboard.settings.general.tsx",
      "parent": "/dashboard/settings"
    }
  }
}
ROUTE_MANIFEST_END */
